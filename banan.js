// L·∫•y ID b√†n t·ª´ URL
// L·∫•y tableId t·ª´ URL ƒë·ªÉ x√°c ƒë·ªãnh b√†n ƒÉn
let db;

const request = indexedDB.open("MenuDB", 1);
function getTableIdFromURL() {
    let urlParams = new URLSearchParams(window.location.search);
    return urlParams.get("tableId") || "default"; // Tr·∫£ v·ªÅ "default" n·∫øu kh√¥ng c√≥ tableId
}

// L·∫•y tableId khi trang t·∫£i xong
document.addEventListener("DOMContentLoaded", function () {
    const tableId = getTableIdFromURL();
    document.getElementById("table-info").textContent = `B·∫°n ƒëang xem th√¥ng tin c·ªßa b√†n s·ªë ${tableId}`;
    
    // Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn ƒë√£ ch·ªçn t·ª´ LocalStorage c·ªßa b√†n hi·ªán t·∫°i
    displaySelectedItems(tableId);
});

// Hi·ªÉn th·ªã m√≥n ƒÉn ƒë√£ ch·ªçn
function displaySelectedItems() {
    let tableId = getTableIdFromURL();
    if (!tableId) return;

    let cartKey = `cart_${tableId}`;
    let cartData = JSON.parse(localStorage.getItem(cartKey)) || [];

    let cartContainer = document.getElementById("cart-items");
    cartContainer.innerHTML = ""; // X√≥a danh s√°ch c≈©

    if (cartData.length === 0) {
        cartContainer.innerHTML = "<p>Ch∆∞a c√≥ m√≥n ƒÉn n√†o ƒë∆∞·ª£c ch·ªçn.</p>";
        return;
    }

    cartData.forEach(item => {
        let itemElement = document.createElement("div");
        itemElement.innerHTML = `
            <p>${item.name} - ${item.price}ƒë x ${item.quantity}</p>
            <button onclick="removeFromCart('${item.name}')">‚ùå B·ªè</button>
        `;
        cartContainer.appendChild(itemElement);
    });
}



// Kh·ªüi t·∫°o IndexedDB


request.onupgradeneeded = function (event) {
    db = event.target.result;
    if (!db.objectStoreNames.contains("foods")) {
        let objectStore = db.createObjectStore("foods", { keyPath: "id", autoIncrement: true });
        objectStore.createIndex("name", "name", { unique: true });
    }
};

request.onsuccess = function (event) {
    db = event.target.result;
    loadFoodList(); // Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn
    loadSelectedFoods(); // Hi·ªÉn th·ªã m√≥n ƒë√£ ch·ªçn
};

// Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn
function loadFoodList() {
    let transaction = db.transaction(["foods"], "readonly");
    let objectStore = transaction.objectStore("foods");

    let request = objectStore.getAll();
    request.onsuccess = function () {
        const foodList = document.getElementById("food-list");
        foodList.innerHTML = "";

        request.result.forEach(food => {
            let foodItem = document.createElement("div");
            foodItem.classList.add("food-item");
            foodItem.innerHTML = `
                <p><strong>${food.name}</strong> - ${food.price}ƒë</p>
                <button onclick="addSelectedFood('${food.name}', ${food.price})">‚ûï Ch·ªçn</button>
            `;
            foodList.appendChild(foodItem);
        });
    };
}

// L∆∞u m√≥n ƒÉn ƒë√£ ch·ªçn v√†o LocalStorage
function addSelectedFood(name, price) {
    const tableId = getTableIdFromURL();
    if (!tableId) return alert("Kh√¥ng t√¨m th·∫•y b√†n ƒÉn!");

    let selectedFoods = JSON.parse(localStorage.getItem(`selected_${tableId}`)) || [];

    let existingItem = selectedFoods.find(item => item.name === name);
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        selectedFoods.push({ name, price, quantity: 1 });
    }

    localStorage.setItem(`selected_${tableId}`, JSON.stringify(selectedFoods));
    loadSelectedFoods();
}

// Hi·ªÉn th·ªã m√≥n ƒÉn ƒë√£ ch·ªçn
function loadSelectedFoods() {
    const tableId = getTableIdFromURL();
    if (!tableId) return;

    let selectedFoods = JSON.parse(localStorage.getItem(`selected_${tableId}`)) || [];
    const selectedList = document.getElementById("selected-list");
    selectedList.innerHTML = "";

    if (selectedFoods.length === 0) {
        selectedList.innerHTML = "<p>Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c ch·ªçn!</p>";
        return;
    }

    selectedFoods.forEach((item, index) => {
        let selectedItem = document.createElement("div");
        selectedItem.classList.add("selected-item");
        selectedItem.innerHTML = `
            <p>${item.name} - ${item.price}ƒë x ${item.quantity}</p>
            <button onclick="removeSelectedFood(${index})">‚ùå B·ªè</button>
        `;
        selectedList.appendChild(selectedItem);
    });
}

// X√≥a m√≥n ƒë√£ ch·ªçn
function removeSelectedFood(index) {
    const tableId = getTableIdFromURL();
    let selectedFoods = JSON.parse(localStorage.getItem(`selected_${tableId}`)) || [];
    
    selectedFoods.splice(index, 1);
    localStorage.setItem(`selected_${tableId}`, JSON.stringify(selectedFoods));

    loadSelectedFoods();
}

// Quay l·∫°i trang tr∆∞·ªõc
function goBack() {
    window.history.back();
}

// Khi DOM load xong, hi·ªÉn th·ªã d·ªØ li·ªáu b√†n
document.addEventListener("DOMContentLoaded", function () {
    const tableId = getTableIdFromURL();
    if (!tableId) {
        document.getElementById("table-info").textContent = "Kh√¥ng t√¨m th·∫•y b√†n ƒÉn!";
    }
});
function searchFood() {
    let input = document.getElementById("search-food").value.toLowerCase();
    let items = document.querySelectorAll(".food-item");

    items.forEach(item => {
        let nameElement = item.querySelector("p"); // L·∫•y ph·∫ßn t·ª≠ <p> ƒë·∫ßu ti√™n
        if (!nameElement) return; // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ b·ªè qua

        let name = nameElement.textContent.toLowerCase();
        item.style.display = name.includes(input) ? "flex" : "none";
    });
}

function checkout() {
    let tableId = getTableIdFromURL();  
    let cartKey = `selected_${tableId}`;  // ƒê·ªïi th√†nh selected_ thay v√¨ cart_
    let cartData = JSON.parse(localStorage.getItem(cartKey)) || [];

    console.log("üîç B√†n hi·ªán t·∫°i:", tableId);
    console.log("üì¶ Gi·ªè h√†ng tr∆∞·ªõc khi thanh to√°n:", cartData);

    if (cartData.length === 0) {
        alert("Gi·ªè h√†ng ƒëang tr·ªëng!");
        return;
    }
    let totalAmount = cartData.reduce((sum, item) => sum + item.price * item.quantity, 0)
    let orderDetails = "B·∫°n c√≥ mu·ªën thanh to√°n c√°c m√≥n sau kh√¥ng?\n";
    cartData.forEach(item => {
        orderDetails += `- ${item.name} x ${item.quantity} : ${item.price * item.quantity}ƒë\n`;
        orderDetails += `\nüí∞ T·ªïng ti·ªÅn: ${totalAmount}ƒë`;
    });

    let confirmPayment = confirm(orderDetails);
    if (confirmPayment) {
        alert(`‚úÖ Thanh to√°n th√†nh c√¥ng b√†n s·ªë ${tableId}!`);
        
        localStorage.removeItem(cartKey); // X√≥a to√†n b·ªô gi·ªè h√†ng
        console.log("üóëÔ∏è Gi·ªè h√†ng ƒë√£ b·ªã x√≥a!");
        window.location.href = `thanhtoan.html?tableId=${tableId}&total=${totalAmount}`;
        
    }
}




function addToCart(name, price) {
    let tableId = getTableIdFromURL();
    let cartKey = `cart_${tableId}`;
    let cartData = JSON.parse(localStorage.getItem(cartKey)) || [];

    let existingItem = cartData.find(item => item.name === name);
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cartData.push({ name, price, quantity: 1 });
    }

    localStorage.setItem(cartKey, JSON.stringify(cartData));
    displaySelectedItems(tableId); // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
}



function loadCart() {
    let tableId = getTableIdFromURL();
    let cartKey = `cart_${tableId}`;
    let cartData = JSON.parse(localStorage.getItem(cartKey)) || [];
    let selectedList = document.getElementById("selected-list");

    selectedList.innerHTML = ""; // X√≥a n·ªôi dung c≈©

    if (cartData.length === 0) {
        selectedList.innerHTML = "<p>Gi·ªè h√†ng tr·ªëng.</p>";
        return;
    }

    cartData.forEach(item => {
        let listItem = document.createElement("div");
        listItem.innerHTML = `${item.name} - ${item.quantity} x ${item.price}ƒë
            <button onclick="removeFromCart('${item.name}')">‚ùå B·ªè</button>`;
        selectedList.appendChild(listItem);
    });
}



